import customtkinter as ctk
from customtkinter import *

from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter

from reportlab.pdfbase import pdfmetrics 
from reportlab.pdfbase.ttfonts import TTFont

from datetime import datetime

from csv import reader

from os import listdir, remove, startfile, mkdir, getlogin, path

# from time import time

from shutil import copy2

from customtkinter import filedialog

from tkinter import *
from tkinter.ttk import *
from tkinter import messagebox
from tkcalendar import *

from PIL import Image

from random import shuffle

import sqlite3 as sql


#GERANDO BASE DE DADOS PARA ETIQUETAS
def Data_Gen():
    
    listaN = list(range(10000,100000))

    listaN1 = list(range(100000,1000000))

    listaN2 = list(range(1000000,10000000))

    shuffle(listaN)

    shuffle(listaN1)

    shuffle(listaN2)

    Lista_Geral = listaN + listaN1 + listaN2 
    
    
    diret = mkdir('main_files/Label Data-Frame')



    count = 0
    while count != 1000-1:
        with open(f'main_files/Label Data-Frame/Label_Data-{count}.csv','w') as arq:
            
            # tempo_inicial = time()
            
            for n in range(0+(10000*count),10000+(10000*count)):
                if n == 10000+(10000*count)-1:
                    arq.write(f'{Lista_Geral[n]}')
                    break
                arq.write(f'{Lista_Geral[n]}\n')
                # Lista_Geral.pop(0)
                
            # tempo_final = time() 
            # print(f'{tempo_final - tempo_inicial:.1f} segundos')
            print(f'Label_Data-{count} CRIADO\n')
            
            count += 1
    


#OBTENDO O CAMINHO PARA SALVAR PDF EM LOCAL DESEJADO
def Getting_Path():
    
    caminho = filedialog.askdirectory(title = "Selecione sua pasta de destino")
    
    return caminho
    



#LENDO O ARQUIVO, RETORNANDO LISTA E FAZENDO FOLLOW-UP
def Reading_Data():
    
    lista_arq = listdir('main_files/Label Data-Frame')
    
    #CASO OS DADOS TENHAM SE ESGOSTADOS
    if lista_arq == []:
        listaNF = []
        return listaNF
    
    #LENDO OS DADOS
    with open(f'main_files/Label Data-Frame/{lista_arq[0]}','r') as arq:
        csv_arq = list(reader(arq))
        
        listaWT = []
        for n in range(0,80):
            listaWT.append(csv_arq[n][0])
            # print(csv_arq[n][0])
    
    #ATUALIZANDO OS ARQUIVOS DE DADOS:
    if len(csv_arq) > 80:
        
        with open(f'main_files/Label Data-Frame/{lista_arq[0]}','w') as arq:
            
            N = len(csv_arq[80:])
            for n in range(0,N):
                if n == N-1:
                    arq.write(f'{csv_arq[80:][n][0]}')
                    break
                arq.write(f'{csv_arq[80:][n][0]}\n')
        
        
    else:
        remove(f'main_files/Label Data-Frame/{lista_arq[0]}')
        
    
    return listaWT




#GERANDO O ARQUIVO PDF DE ETIQUETAS COM IDs
def Label_Model(listaWT,tipo,caminho):
    
    #PARÂMETROS DE ENTRADA
    c = caminho
    t = tipo #EC,PT,MP or GR
    l = listaWT
    
    #CASO SE ESGOTE O BANCO DE DADOS
    if l == [] :
        
        count = 0
        lista_pg = []
        for n in range(0,20):
            lista_lnh = []
            for i in range(0,4):
                # print(count)
                lista_lnh.append('NoDataFound')
                count += 1
                
        
            lista_pg.append(lista_lnh)
    
    #TRATANDO LISTA DE IDS
    else:
        count = 0
        # lista = []
        # for j in range(0,80):
        lista_pg = []
        for n in range(0,20):
            lista_lnh = []
            for i in range(0,4):
                # print(count)
                lista_lnh.append(f'{t} '+str(l[count])[0:2]+
                                      ' '+str(l[count])[2:4]+
                                      ' '+str(l[count])[4:])
                count += 1
                
        
            lista_pg.append(lista_lnh)
        # lista.append(lista_pg)
    
    time_mark = str(datetime.now())[:-7].replace(':',';')
    
    file_name = f'Etiquetas {time_mark} {getlogin()}.pdf'
    
    f = 25.4/72
    
    #CRIANDO PDF DE ETIQUETAS COM REPORTLAB
    pdf = canvas.Canvas(f'main_files/PDFs_done/{file_name}',pagesize = letter)
    
    font = 'arialbd.ttf'
    pdfmetrics.registerFont(TTFont(font, 'main_files/'+font))
    
    
    # count = 0
    # for pg in lista:
        
    count1 = 0
    for linha in lista_pg:
        
        count2 = 0 
        for cell in linha:
            pdf.drawBoundary(1, (14.3+0.85)/f+count2*(47.5/f),
                              254/f-count1*(12.7/f), 44/f, 10.8/f)
            pdf.setFont(font,18)
            pdf.drawCentredString((13.2+0.3)/f+(47.5/(2*f))+count2*(47.5/f),
                                  250.8/f+(12.7/(2*f))-count1*(12.7/f),
                                  str(lista_pg[count1][count2]))
            count2 += 1
        
        count1 += 1
            
        # count += 1
        # pdf.showPage()
        
    pdf.save()
    
    #SALVANDO CÓPIA DO ARQUIVO
    copy2(f'main_files/PDFs_done/{file_name}', c)
    
    #ABRINDO ARQUIVO
    startfile(c+f'/{file_name}')

# PEGANDO INFORMAÇÕES DA TELA
root = Tk()
ScreenX,ScreenY = root.winfo_screenwidth(),root.winfo_screenheight()
root.destroy()
# print(ScreenX,ScreenY)

# VARIÁVEIS IMPORTANTES
# Lista_Responsaveis = 

######## CRIANDO E MANIPULANDO BANCO DE DADOS EM SQL ########################################### 
DB_Name = 'Stock Data'
DB_caminho = f'main_files/Data Base/{DB_Name}.db'
Table_Stock = 'Stock_Data'
Table_Trace = 'Stock_Data_Trace'
Table_Resp =  'Stock_Data_Resp'
Table_Codigos = 'Stock_Data_Cod'

#Crinado tabela do banco de dados
def create_db():
    
    if path.exists(DB_caminho) == False:
        
        if path.exists('main_files/Data Base') == False:
            
            mkdir('main_files/Data Base')
        
        connection = sql.connect(f'{DB_caminho}')
        blinker = connection.cursor() #como se fosse o cursor do prompt do SQL
        blinker.execute(f"""CREATE TABLE IF NOT EXISTS {Table_Stock}(   Identificador TEXT,
                                                                        Id INTEGER PRIMARY KEY,
                                                                        Responsável TEXT,
                                                                        Champ_Code NUMERIC,
                                                                        Validade NUMERIC,
                                                                        Volume NUMERIC,
                                                                        Obs TEXT,
                                                                        Time_Stamps_Login NUMERIC
                                                                        )""")
        connection.commit()

        blinker.execute(f"""CREATE TABLE IF NOT EXISTS {Table_Trace}(   Identificador TEXT,
                                                                        Id INTEGER,
                                                                        Responsável TEXT,
                                                                        Código NUMERIC,
                                                                        Validade NUMERIC,
                                                                        Volume NUMERIC,
                                                                        Obs TEXT,
                                                                        Time_Stamps_Login NUMERIC,
                                                                        Time_Stamps_Login_Trace NUMERIC
                                                                        )""")
        connection.commit()
        
        blinker.execute(f"""CREATE TABLE IF NOT EXISTS {Table_Resp}(Responsáveis TEXT)""")
        connection.commit()
        
        blinker.execute(f"""CREATE TABLE IF NOT EXISTS {Table_Codigos}(Códigos NUMERIC)""")
        connection.commit()
    
create_db()    

#Buscando dados    
def fetch_itens():
    
    connection = sql.connect(f'{DB_caminho}')
    blinker = connection.cursor()
    blinker.execute(f'SELECT * FROM {DB_Name}')
    itens = blinker.fetchall() #me retorna uma lista de tuplas
    connection.close()
    
    return itens

#Inserindo dados do íten
def insert_itens(Identificador, ID, Responsável, Champ_Code, Validade, Volume):
    
    Time_Stamps_Login = str(datetime.now())+str(getlogin())
    connection = sql.connect(f'{DB_Name}.db')
    blinker = connection.cursor()
    blinker.execute(f'INSERT INTO {DB_Name} (Identificador, Id, Responsável, Champ_Code, Validade, Volume, Time_Stamps_Login)',
                    (Identificador, Id, Responsável, Champ_Code, Validade, Volume, Time_Stamps_Login))
    connection.commit()
    connection.close()
    

#Deletando dados
def delete_itens(ID):
    
    connection = sql.connect(f'{DB_Name}.db')
    blinker = connection.cursor()
    blinker.execute(f'SELECT * FROM {Table} WHERE Id = {ID}')
    item = blinker.fetchall()
    blinker.execute(f"""INSERT INTO {Table}_Traceability (  Identificador,
                                                            Id,
                                                            ResponsáveL,
                                                            Champ_Code,
                                                            Validade,
                                                            Volume,
                                                            Time_Stamps_Login,
                                                            Time_Stamps_Login_Trace) VALUES
                                                            ('{item[0][0]}',
                                                            {item[0][1]},
                                                            '{item[0][2]}',
                                                            '{item[0][3]}',
                                                            '{item[0][4]}',
                                                            '{item[0][5]}',
                                                            '{item[0][6]}',
                                                            '{str(datetime.now())[:19]+' '+str(getlogin())}')""")
    connection.commit()

    blinker.execute(f'DELETE FROM {Table} WHERE Id = {ID}')
    connection.commit()
    connection.close()
    
    
    


class App(ctk.CTk): # App = ctk.CTk
    
    def __init__(self):
        super().__init__()
        self.window_config()
        self.tema_config()
        self.frontend()
        
        
        
    def window_config(self):
        self.title("SPSLab - Controle de Armazenamento")
        x1,y1 = 1000,650
        self.iconbitmap("PPG ICON.ico")
        self.geometry(f"{x1}x{y1}+{(ScreenX-x1)//2}+{(ScreenY-y1)//4}")
        self._set_appearance_mode("system")
        # self.resizable(width=False, height=False)
        self.minsize(width=x1,height=y1)
        
    
    def tema_config(self):
        
        self.switch_var = ctk.StringVar(value="system")
        
        def set_tema():
            
            if self.switch_var.get() =="light":
                ctk.set_appearance_mode("light")
                
            else:
                ctk.set_appearance_mode("dark")
                
                
        
        self.switch = ctk.CTkSwitch(self, text = None, variable=self.switch_var, 
                                    onvalue= "dark", offvalue="light", command=set_tema)
        self.switch.place(x=25,y=20)
        
    
    def frontend(self):
        
        self.Label_logo = ctk.CTkLabel(self, text="                      We protect and\n                      beautify the world™", 
                                       font=("helvitica",12), justify = "left" )
        self.Label_logo.place(relx=0.02,rely=0.927)#relx=0.09,rely=0.93)
        
        #Logo
        if self.switch_var.get() =="light":
            logo = ctk.CTkImage(light_image=Image.open("PPG LOGO2.png"), size=(250*0.25,90*0.25))
        else:
            logo = ctk.CTkImage(dark_image=Image.open("PPG LOGO2.png"), size=(153*0.40,120*0.40))
            
        self.logo_Label = ctk.CTkLabel(self, text=None,image=logo)
        self.logo_Label.place(relx=0.02,rely=0.91)
        
        
        self.Label = ctk.CTkLabel(self, text="Sistema de Controle de Armazenamento", font=("arial bold",30))
        self.Label.pack(pady = 20)
        
        self.tabview = ctk.CTkTabview(self,
                                      width = 700,
                                      height = 510,
                                      corner_radius=8,
                                      border_width=2,
                                      segmented_button_fg_color="grey",
                                      segmented_button_selected_color="#037",
                                      segmented_button_unselected_hover_color="#111",
                                      segmented_button_unselected_color="#333")
        self.tabview.pack(pady = 0)
        self.tabview.add("Controle de Dados")
        self.tabview.add("Relatório")
        self.tabview.add("Etiquetas")
        self.tabview.tab("Etiquetas").grid_columnconfigure(1, weight=1)
        self.tabview.tab("Controle de Dados").grid_columnconfigure(1, weight=1)
        self.tabview.tab("Relatório").grid_columnconfigure(1, weight=1)
        
        
        
        ##### CRINADO ABA DE "Etiquetas" #################################################################
        
        self.Hang_Tags_Label = ctk.CTkLabel(self.tabview.tab("Etiquetas"), text="Escolha um Identificador",
                                            font=("arial bold",30))
        self.Hang_Tags_Label.pack(pady=20)
        
        #criando variável para radiobuttons
        self.Tag_type = ctk.IntVar(value=0)
        
        #criando função para pegar valores de cada etiqueta
        def tipo():
            dictionary = {1:'EC',2:'PT',3:'MP',4:'GR'}
            return dictionary[self.Tag_type.get()]
        
        #criando RadioButtons
        dtry = {1:' EC',2:' PT',3:' MP',4:' GR'}
        for n in range(1,5):
            self.RBt = CTkRadioButton(self.tabview.tab("Etiquetas"), text = dtry[n], command = tipo , 
                                      variable = self.Tag_type , value = n, font=("arial bold",40))
            self.RBt.pack(pady=12)
        
        #definindo função para geração de PDF de etiquetas
        def Gerar_PDF():
            
            if self.Tag_type.get() != 0:
                
                caminho = Getting_Path()
                
                Label_Model(Reading_Data(), tipo(), caminho)
            else:
                messagebox.showerror(title='Erro de Seleção', message='Por favor, selecione\n   uma das opções' )
            pass
        
        #criando botão para geração de PDF de etiquetas
        self.B1 = CTkButton(self.tabview.tab("Etiquetas"), text = "Gerar Etiquetas",command = Gerar_PDF, 
                                font=("arial bold",18),fg_color="#ba0606")
        self.B1.pack(pady = 25)
        
        #criando Label de Aviso
        self.Label_aviso = ctk.CTkLabel(self.tabview.tab("Etiquetas"), text="* No momento da impressão selecione o tamanho Carta",
                                            font=("arial",12))
        self.Label_aviso.pack()
        
        
        ##### CRIANDO ABA DE "Controle de Dados" #################################################################
        
        # criando calendário para seleção de validade
        self.Calen_Validade = Calendar(self.tabview.tab("Controle de Dados"),selectmode = 'day', 
                                       date_pattern = 'dd/mm/y',locale="pt_BR" )
        self.Calen_Validade.place(x=415,y=25)
        
        # criando barra de buscar de itens
        self.Label_Busca_entry = ctk.CTkLabel(self.tabview.tab("Controle de Dados"), text='Busca:', 
                                              font=("arial",16,"bold"))
        self.Label_Busca_entry.place(x=18.5,y=0)
        self.Busca_entry = ctk.CTkEntry(self.tabview.tab("Controle de Dados"), 
                                        width=200, height=35, font=('arial',14))
        self.Busca_entry.place(x=18,y=25)
        
        # criando botão de gatilho para  buscar de itens
        def take_entry_Busca():
            return self.Busca_entry.get()
        self.Busca_Button = ctk.CTkButton(self.tabview.tab("Controle de Dados"),text='🔍',text_color = 'black',#command =, 
                                font=("arial",18), height=35, width=35,corner_radius=8, border_color='silver',
                                border_width=1.5, fg_color = 'silver', hover_color ='white'  ) 
        self.Busca_Button.place(x=18+208,y=25)
        
        
        # criando Label para ComboBox de filtro
        self.Label_Filtro = ctk.CTkLabel(self.tabview.tab("Controle de Dados"), text='Filtro:', 
                                         font=("arial",14,"bold"))
        self.Label_Filtro.place(x=18.5+210+45,y=0)
        # criando ComboBox de filtro para busca de itens
        self.Filtro = ctk.CTkComboBox(self.tabview.tab("Controle de Dados"),values=['','ID','Identif.','Código','Resp.','Volume','Validade'] ,
                                        width=130, height=35, font=('arial',16,'bold'),corner_radius=8)
        self.Filtro.place(x=18+210+45,y=25)
        
        
        # criando Label para entry Identificação
        self.Label_Ident = ctk.CTkLabel(self.tabview.tab("Controle de Dados"), text='Identificador:',
                                        font=("arial",14,"bold"))
        self.Label_Ident.place(x=18.5,y=50+40)
        # criando entry para Identificação
        self.Identficador = ctk.CTkComboBox(self.tabview.tab("Controle de Dados"),values=['','EC','PT','MP','GR'] ,
                                        width=120, height=35, font=('arial',14,'bold'),corner_radius=8)
        self.Identficador.place(x=18.5,y=50+65)
        
        
        # criando Label da entry para IDs
        self.Label_ID_entry = ctk.CTkLabel(self.tabview.tab("Controle de Dados"), text='ID:', font=("arial",14,"bold"))
        self.Label_ID_entry.place(x=18.5+135,y=50+40)
        # criando entry para IDs
        self.ID_entry = ctk.CTkEntry(self.tabview.tab("Controle de Dados"), 
                                        width=118, height=35, font=('arial',14))
        self.ID_entry.place(x=18+135,y=50+65)
        
        
        # criando Label da entry para Volume
        self.Label_Volume_entry = ctk.CTkLabel(self.tabview.tab("Controle de Dados"), text='Volume:',font=("arial",14,"bold"))
        self.Label_Volume_entry.place(x=18.5+135+115+17,y=50+40)
        # criando entry para Volume
        self.Volume_entry = ctk.CTkComboBox(self.tabview.tab("Controle de Dados"),
                                        values=['','3,6 L','5 L','18 L','20 L','500 mL','250 mL', 'Caixa'],
                                        width=118, height=35, font=('arial',14,'bold'),corner_radius=8 )
        self.Volume_entry.place(x=18+135+115+17,y=50+65)
        
        
        # criando Label da entry para Responsáveis
        self.Label_Responsavel_entry = ctk.CTkLabel(self.tabview.tab("Controle de Dados"), text='Responsável:',
                                                    font=("arial",14,"bold"))
        self.Label_Responsavel_entry.place(x=18.5,y=50+40+63)
        # criando entry para Responsáveis
        self.Responsavel_entry = ctk.CTkComboBox(self.tabview.tab("Controle de Dados"),
                                        values=['','João Ricardo','Thiago Duarte','Murilo Deny',
                                                'Marco Alrélio','Rauquel Cristila', 'Ana Cussolim'],
                                        width=235, height=35, font=('arial',14),corner_radius=8 )
        self.Responsavel_entry.place(x=18,y=50+65+63)
        
        
        # criando Label da entry para Códigos
        self.Label_Codigo_entry = ctk.CTkLabel(self.tabview.tab("Controle de Dados"), text='Código:', 
                                               font=("arial",14,"bold"))
        self.Label_Codigo_entry.place(x=18.5+265-15,y=50+40+63)
        # criando Label da entry para Códigos
        self.Codigo_entry = ctk.CTkComboBox(self.tabview.tab("Controle de Dados"),values=['','KT-49-9488'], 
                                        width=136, height=35, font=('arial',14))
        self.Codigo_entry.place(x=18+265-17,y=50+65+63)
        
        
        # criando Label da entry para Observações
        self.Label_OBS_entry = ctk.CTkLabel(self.tabview.tab("Controle de Dados"), text='OBS:', font=("arial",14,"bold"))
        self.Label_OBS_entry.place(x=18.5,y=50+40+63+63)
        # criando entry para Observações
        self.OBS_entry = ctk.CTkEntry(self.tabview.tab("Controle de Dados"), 
                                      width=215, height=35, font=('arial',14))
        self.OBS_entry.place(x=18,y=50+65+63+60)
        
        
        # criando Label da entry para Validade
        self.Label_Validade_entry = ctk.CTkLabel(self.tabview.tab("Controle de Dados"), text='Validade:', font=("arial",15,"bold"))
        self.Label_Validade_entry.place(x=18.5+215+67-55,y=50+40+63+63)
        # criando entry para Validade
        self.Validade_entry = ctk.CTkEntry(self.tabview.tab("Controle de Dados"), placeholder_text= 'dd/mm/AAAA',
                                        placeholder_text_color='#333', width=115, height=35, font=('arial',14))
        self.Validade_entry.place(x=18+215+67-55,y=50+65+63+60)
        
        
        #criando função para pegar data do calendário
        def take_date():
            self.Validade_entry.delete(0,END)
            self.Validade_entry.insert(0, f'{self.Calen_Validade.get_date()}')
            
        #criando botão para pegar data do calendário
        self.Validade_Button = ctk.CTkButton(self.tabview.tab("Controle de Dados"),text='🗓',command = take_date,text_color = 'black',#command =, 
                                font=("arial",18), height=35, width=35,corner_radius=8, #border_color='silver',
                                border_width=1.5, fg_color = 'silver', hover_color ='white'  ) 
                               #, border_color='silver')
        self.Validade_Button.place(x=18+215+12+117,y=50+65+63+60)
        
        
        #criando botão para INSERIR dados
        self.INSERIR_Button = ctk.CTkButton(self.tabview.tab("Controle de Dados"),text='➕ Inserir',#command = take_date, 
                                font=("arial",12), height=30, width=65,corner_radius=8, border_width=1.5 ,#border_color='',
                                fg_color = '#080278')
        self.INSERIR_Button.place(x=18+215+12+117+58,y=50+65+63+54)
        
        #
        #criando botão para DELETAR dados
        self.DELETAR_Button = ctk.CTkButton(self.tabview.tab("Controle de Dados"),text='✖️ Deletar',#command = take_date, 
                                font=("arial",12), height=30, width=65,corner_radius=8, border_width=1.5 ,#border_color='',
                                fg_color = '#a60202', hover_color ='#ba2929' )
        self.DELETAR_Button.place(x=18+215+12+117+60+166,y=50+65+63+54)
        
        
        #criando botão para ATUALIZAR dados
        self.ATUALIZAR_Button = ctk.CTkButton(self.tabview.tab("Controle de Dados"),text='✏ Atualizar',#command = take_date, 
                                font=("arial",12), height=30, width=73,corner_radius=8, border_width=1.5 ,#border_color='',
                                fg_color = '#02783b', hover_color ='#179c57'  )
        self.ATUALIZAR_Button.place(x=18+215+12+117+60+77,y=50+65+63+54)
        
        #criando botão limpar
        self.LIMPAR_Button = ctk.CTkButton(self.tabview.tab("Controle de Dados"),text=' 🧹 ',text_color='black',#command = take_date,  
                                font=("arial",16), height=25, width=30,corner_radius=8, border_width=1.5 ,#border_color='',
                                fg_color = '#e6a902', hover_color ='#b88702'  )
        self.LIMPAR_Button.place(x=18,y=65)
            
        ####  CRIANDO TREEVIEW PARA ABA CONTROLE DE DADOS  #################################################
        
        
        #criando um estilo para Treeview
        self.style = Style(self.tabview.tab("Controle de Dados"))
        
        self.style.theme_use('clam')
        self.style.configure('Treeview', font = ("arial",12),foreground='grey',background='silver',fieldbackround='black')
        self.style.map('Treeview', background=[('selected','#036491')])
        
        #criando Treeview
        self.TREEVIEW = Treeview(self.tabview.tab("Controle de Dados"),height=7 )
        self.TREEVIEW.place(x=18,y=285)
        
        #criando colunas
        self.TREEVIEW['columns'] = ('Identif.','ID','Código','Validade','Responsável','Volume')
        self.TREEVIEW.column('#0', width=0, stretch=NO)
        self.TREEVIEW.column('Identif.',anchor=CENTER, width=70)
        self.TREEVIEW.column('ID',anchor=CENTER, width=110)
        self.TREEVIEW.column('Código',anchor=CENTER, width=110)
        self.TREEVIEW.column('Responsável',anchor=CENTER, width=132)
        self.TREEVIEW.column('Validade',anchor=CENTER, width=112)
        self.TREEVIEW.column('Volume',anchor=CENTER, width=110)
        
        #inserindo nome das colunas
        self.TREEVIEW.heading('Identif.', text='Identif.')
        self.TREEVIEW.heading('ID', text='ID')
        self.TREEVIEW.heading('Código', text='Código')
        self.TREEVIEW.heading('Responsável', text='Responsável')
        self.TREEVIEW.heading('Validade', text='Validade')
        self.TREEVIEW.heading('Volume', text='Volume')




if __name__ == "__main__":
    aplicativo = App()
    aplicativo.mainloop()
